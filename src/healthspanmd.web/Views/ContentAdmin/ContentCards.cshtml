@{
    ViewData["Title"] = "Content Cards";
    ViewData["LeftNav_ActiveItem"] = "ContentCards";
}
<div class="content d-flex flex-column flex-column-fluid" id="kt_content">
	<div id="clientListDataContainer" class="container-xxl">	
		<div id="contentCardListContainer">
            <div class="card-toolbar mb-4">
			    <div class="d-flex justify-content-end" data-kt-client-table-toolbar="base">
				    <button class="btn btn-primary" type="button" onclick="createNewContentCard();">Create New Content Card</button>
			    </div>
		    </div>

            @(Html.Kendo().Grid<healthspanmd.web.Models.ContentAdmin.ContentCardListItemViewModel>()
                .Name("grid")
                .ToolBar(t => t.Search())
                //.HtmlAttributes(new { @class = "fs-6" })
                .Columns(columns =>
                {
                    columns.Bound(s => s.ContentCardId).Title("Id");

                    columns.Bound(s => s.Name)
                            .Title("Name")
                            .ClientTemplate("<a href='/ContentAdmin/CardBuilder/#=ContentCardId#'>#=Name#</a>");

                    columns.Bound(s => s.Description);

                    columns.Bound(s => s.IsActive)
                            .Title("Status")
                            .ClientTemplate(@"#if (IsActive){#
                                                    <span class='svg-icon svg-icon-success svg-icon-2hx'>
									                    <svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none'>
										                    <path d='M9.89557 13.4982L7.79487 11.2651C7.26967 10.7068 6.38251 10.7068 5.85731 11.2651C5.37559 11.7772 5.37559 12.5757 5.85731 13.0878L9.74989 17.2257C10.1448 17.6455 10.8118 17.6455 11.2066 17.2257L18.1427 9.85252C18.6244 9.34044 18.6244 8.54191 18.1427 8.02984C17.6175 7.47154 16.7303 7.47154 16.2051 8.02984L11.061 13.4982C10.7451 13.834 10.2115 13.834 9.89557 13.4982Z' fill='black'/>
									                    </svg>
								                    </span>
								                    <span>Active</span>
                                                #}else{#  
                                                    <span class='svg-icon svg-icon-warning svg-icon-2hx'>
									                    <svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none'>
									                    <rect opacity='0.3' x='2' y='2' width='20' height='20' rx='10' fill='black'/>
									                    <rect x='11' y='14' width='7' height='2' rx='1' transform='rotate(-90 11 14)' fill='black'/>
									                    <rect x='11' y='17' width='2' height='2' rx='1' transform='rotate(-90 11 17)' fill='black'/>
									                    </svg>
								                    </span>
								                    <i>Inactive</i>
                                                #}#");


                  

                    columns.Command(commands =>
                    {
                        commands
                            .Custom("commandEdit")
                            .Template("<button class='k-grid-commandEdit btn btn-light-dark btn-sm m-1'>Edit</button>")
                            .Click("gotoCardBuilder");

                        commands
                            .Custom("commandView")
                            .Template("<button class='k-grid-commandView btn btn-light-dark btn-sm m-1'>View</button>")
                            .Click("gotoCard");

                    }).Title("Actions").Width(200);
                })

                .DataSource(dataSource =>
                    dataSource.Ajax()
                        .Read(read => read.Action("ContentCardList_Read", "ContentAdmin"))  // Action invoked when the Grid needs data.
                )
                //.Scrollable(sc => sc.Endless(true))
                .Pageable()
                .Filterable()
                .Sortable()
                .Search(s => {
                    s.Field(o => o.Name, "contains");
                    s.Field(o => o.Description, "contains");

                })
            )


		</div>

	</div>
</div>

<div class="modal fade" tabindex="-1" id="modalCreateNewContentCard">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Content Card</h5>

                <div class="btn btn-icon btn-sm btn-active-light-primary ms-2" data-bs-dismiss="modal" aria-label="Close">
                    <span class="svg-icon svg-icon-2x">
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
							<rect opacity="0.5" x="6" y="17.3137" width="16" height="2" rx="1" transform="rotate(-45 6 17.3137)" fill="black"></rect>
							<rect x="7.41422" y="6" width="16" height="2" rx="1" transform="rotate(45 7.41422 6)" fill="black"></rect>
						</svg>
					</span>
                </div>

            </div>

            <div class="modal-body">
                <div class="mt-4">
                    <div class="fv-row mb-7">
						<label class="required fs-6 fw-bold mb-2">Card Name</label>
						<input id="cardName" type="text" class="form-control form-control-solid" placeholder="Enter Name here ..." />
						<span id="cardName_Invalid" class="text-danger d-none">Card Name is required.</span>
					</div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveNewContentCard();">Create</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    <script type="text/javascript">

        function gotoCardBuilder(e) {
            e.preventDefault();
            actionDataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var url = "/ContentAdmin/CardBuilder/" + actionDataItem.ContentCardId;
            window.location.href = url;
        }

        function gotoCard(e) {
            e.preventDefault();
            actionDataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var url = "/Content/" + actionDataItem.ContentCardId;
            window.location.href = url;
        }

        function createNewContentCard(){
            $("#modalCreateNewContentCard").modal("show");
        }

        function saveNewContentCard(){
            showBusySpinner();
            var serviceUrl = "/ContentAdmin/CreateContentCard";
            var createObj = {
                ContentCardId : 0 ,
                Name: $("#cardName").val()
            };
            $.ajax({
                url: serviceUrl,
                type: "post",
                data: JSON.stringify(createObj),
				contentType: "application/json",
                success: function (response) {
                    if (response.success) {
                        window.location.href = "/ContentAdmin/CardBuilder/" + response.contentCardId;
                    } else {
                        console.log(serviceUrl + " did not succeed");
                    }
                    hideBusySpinner();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(serviceUrl + " failed");
                    hideBusySpinner();
                }
            });
        }

    </script>

}

