@model healthspanmd.web.Models.Metric.MetricViewModel
@{
	var title = "Metric Detail";
	var caption = "Add a Metric";
	if (Model.MetricId == 0)
	{
		title += ": New Metric";
	}
	else
	{
		title += ": " + Model.Name;
		caption = "Edit Metric";
	}
	ViewData["Title"] = title;
	ViewData["LeftNav_ActiveItem"] = "Metrics";
}

<h1>@caption</h1>

<div class="content d-flex flex-column flex-column-fluid" id="kt_content">
	<div id="kt_content_container" class="container-xxl">
		<form class="form" id="formMetric">
			<input type="hidden" id="metricId" value="@Model.MetricId" />
			

			<div class="modal-body py-10 px-lg-17">
				<div class="scroll-y me-n7 pe-7" id="kt_modal_add_metric_scroll" data-kt-scroll="true" data-kt-scroll-activate="{default: false, lg: true}" data-kt-scroll-max-height="auto" data-kt-scroll-dependencies="#kt_modal_add_customer_header" data-kt-scroll-wrappers="#kt_modal_add_customer_scroll" data-kt-scroll-offset="300px">
					<div class="fv-row mb-7">
						<label class="required fs-6 fw-bold mb-2">Name</label>
						<input id="metricName" type="text" class="form-control form-control-solid" placeholder="" name="metricName" value="@Model.Name" />
						<span id="metricName_Invalid" class="text-danger d-none">Name is required.</span>
					</div>
					<div class="fv-row mb-7">
						<label class="required fs-6 fw-bold mb-2">Description</label>
						<input id="metricDescription" type="text" class="form-control form-control-solid" placeholder="" name="metricDescription" value="@Model.Description" />
						<span id="metricDescription_Invalid" class="text-danger d-none">Description is required.</span>
					</div>
					<div class="d-flex flex-column mb-7 fv-row">
						<label class="fs-6 fw-bold mb-2">
							<span class="required">Data Type</span>
						</label>
						<select id="metricDataType" name="metricDataType" aria-label="Select a Data Type" data-placeholder="Select a Data Type..." class="form-select form-select-solid fw-bolder" onchange="setControlState();">
							<option value="-1" disabled selected>Select a Data Type</option>
							<option value="0">Yes / No</option>
							<option value="1">Integer</option>
							<option value="6">Integer (Dial)</option>
							<option value="7">Integer (Slider)</option>
							<option value="8">Integer (2 numbers)</option>
							<option value="2">Decimal</option>
							<option value="3">Alpha</option>
							<option value="4">Alpha (Select)</option>
							<option value="5">Date</option>
						</select>
						<span id="metricDataType_Invalid" class="text-danger d-none">Please select a Data Type.</span>
					</div>

					<div id="alphaSelectOptions" class="row mb-7 d-none">
						<label class="fs-6 fw-bold mb-2">Alpha Selection Options</label>
						<div id="selectItemSortContainer" class="draggable-zone col-md-7 p-10 pt-2" tabindex="0">
							@foreach (var item in Model.SelectItems.OrderBy(i => i.SortOrder))
							{
								<div class="draggable d-flex justify-content-between selectItemDiv" id="selectItemId_@item.MetricSelectItemId">
									<div class="cursor-pointer">
										<a href="javascript:void(0);" onclick="confirmDeleteSelectItem(@item.MetricSelectItemId);" data-bs-toggle="tooltip" data-bs-placement="top" title="Delete select option">
											<img src="/assets/media/icons/duotune/general/gen040.svg"/>
										</a>
										<a name="selectItemRow_EditLink" href="javascript:void(0);" onclick="editSelectItem(@item.MetricSelectItemId);" data-bs-toggle="tooltip" data-bs-placement="top" title="Edit select option"><img src="/assets/media/icons/duotune/general/gen055.svg"/>
										<span name="selectItemRow_DisplayText">@item.ItemDisplayText</span></a>
										<i class="ml-3">{<span name="selectItemRow_ItemValue">@item.ItemValue</span>}</i>
									</div>
									
									<div class="d-flex justify-content-end">
										<a href="#" class="btn btn-icon btn-sm btn-hover-light-primary draggable-handle">
											<span class="svg-icon svg-icon-2x">
												<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
													<path d="M21 7H3C2.4 7 2 6.6 2 6V4C2 3.4 2.4 3 3 3H21C21.6 3 22 3.4 22 4V6C22 6.6 21.6 7 21 7Z" fill="black"></path>
													<path opacity="0.3" d="M21 14H3C2.4 14 2 13.6 2 13V11C2 10.4 2.4 10 3 10H21C21.6 10 22 10.4 22 11V13C22 13.6 21.6 14 21 14ZM22 20V18C22 17.4 21.6 17 21 17H3C2.4 17 2 17.4 2 18V20C2 20.6 2.4 21 3 21H21C21.6 21 22 20.6 22 20Z" fill="black"></path>
												</svg>
											</span>
										</a>
									</div>
								</div>
							}		
						</div>
						<span id="metricSelectItems_Invalid" class="text-danger d-none">Please add at least one Alpha Select Option.</span>
						
						<!-- Placeholder Row -->
						<div class="d-none" id="selectItemId_MetricSelectItemId" >
							<div class="cursor-pointer">
								<a href="javascript:void(0);" onclick="confirmDeleteSelectItem(MetricSelectItemId);" data-bs-toggle="tooltip" data-bs-placement="top" title="Delete select option">
									<img src="/assets/media/icons/duotune/general/gen040.svg"/>
								</a>
								<a id="selectItemRow_EditLink" href="javascript:void(0);" onclick="editSelectItem(MetricSelectItemId);"><img src="/assets/media/icons/duotune/general/gen055.svg"/>
								<span name="selectItemRow_DisplayText">ItemDisplayText</span></a>
								<i class="ml-3">{<span name="selectItemRow_ItemValue">ItemValue</span>}</i>
								
							</div>
							<div class="d-flex justify-content-end">
								<a href="#" class="btn btn-icon btn-sm btn-hover-light-primary draggable-handle">
									<span class="svg-icon svg-icon-2x">
										<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
											<path d="M21 7H3C2.4 7 2 6.6 2 6V4C2 3.4 2.4 3 3 3H21C21.6 3 22 3.4 22 4V6C22 6.6 21.6 7 21 7Z" fill="black"></path>
											<path opacity="0.3" d="M21 14H3C2.4 14 2 13.6 2 13V11C2 10.4 2.4 10 3 10H21C21.6 10 22 10.4 22 11V13C22 13.6 21.6 14 21 14ZM22 20V18C22 17.4 21.6 17 21 17H3C2.4 17 2 17.4 2 18V20C2 20.6 2.4 21 3 21H21C21.6 21 22 20.6 22 20Z" fill="black"></path>
										</svg>
									</span>
								</a>
							</div>
						</div>
						<!-- end Placeholder Row -->

						
						<div class="col-md-3">
							<button class="btn btn-primary" type="button" onclick="addSelectItem();">Add New Option</button>
						</div>
					</div>


					<div class="row d-none mb-7" id="numericMaxMinControls">
						<div class="fv-row col-md-6">
							<label class="fs-6 fw-bold mb-2">Minimum Value</label>
							<input id="metricMinValue" type="number" class="form-control form-control-solid" placeholder="" name="metricMinValue" value="@Model.MinValue" />
							<span id="metricMinValue_Invalid" class="text-danger d-none">message.</span>
						</div>
						<div class="fv-row col-md-6">
							<label class="fs-6 fw-bold mb-2">Maximum Value</label>
							<input id="metricMaxValue" type="number" class="form-control form-control-solid" placeholder="" name="metricMaxValue" value="@Model.MaxValue" />
							<span id="metricMaxValue_Invalid" class="text-danger d-none">message.</span>
						</div>
					</div>
								

					<div class="row mb-7">
						<div class="col-md-6">
							<div class="d-none" id="divAllowMultiple">
								<div class="me-5">
									<label class="fs-6 fw-bold form-label">Allow Multiple Values?</label>
									<div class="fs-7 fw-bold text-gray-400">Indicate if multiple values are allowed for single entry</div>
								</div>
								<label class="form-check form-switch form-check-custom form-check-solid">
									<input id="metricAllowMultiple" class="form-check-input" type="checkbox" value="1"  />
									<span class="form-check-label fw-bold text-gray-400">Allow</span>
								</label>
								<span id="metricAllowMultiple_Invalid" class="text-danger d-none">message.</span>
							</div>							
						</div>
						<div class="col-md-6">
							<div class="d-none" id="divIsNumeric">
								<div class="me-5">
									<label class="fs-6 fw-bold form-label">Enforce Numeric Values?</label>
									<div class="fs-7 fw-bold text-gray-400">Indicate if select option values must be numeric</div>
								</div>
								<label class="form-check form-switch form-check-custom form-check-solid">
									<input id="metricIsNumeric" class="form-check-input" type="checkbox" value="1" onchange="setControlState();" />
									<span class="form-check-label fw-bold text-gray-400">Enforce Numeric</span>
								</label>
							</div>
						</div>
					</div>

					<div class="row mb-7 d-none" id="divPositivePolarityAndThreshold">
						<div class="col-md-6">
							<div class="mb-4">
								<div class="me-5">
									<label class="fs-6 fw-bold form-label">Is Bigger Better?</label>
									<div class="fs-7 fw-bold text-gray-400">Indicate if a greater number is 'positive' (for visualization charts)</div>
								</div>
								<label class="form-check form-switch form-check-custom form-check-solid">
									<input id="metricIsPositivePolarity" class="form-check-input" type="checkbox" value="1"  />
									<span class="form-check-label fw-bold text-gray-400">Bigger is Better</span>
								</label>
							</div>					
						</div>
						<div class="col-md-6">
							<label class="fs-6 fw-bold mb-2">Threshold Value (default goal)</label>
							<input id="metricThreshold" type="number" class="form-control form-control-solid" placeholder="Threshold Value" name="metricThresholdValue" value="@Model.Threshold" />
							<span id="metricThreshold_Invalid" class="text-danger d-none">message.</span>

							<div id="divThreshold2" class="d-none">
								<label class="fs-6 fw-bold mb-2">Threshold-2 Value (default goal)</label>
								<input id="metricThreshold2" type="number" class="form-control form-control-solid" placeholder="Threshold-2 Value" name="metricThreshold2Value" value="@Model.Threshold2" />
								<span id="metricThreshold2_Invalid" class="text-danger d-none">message.</span>
							</div>
						</div>
					</div>
								
					<div class="row mb-7">
						<div class="col-md-6">
							<div class="mb-4">
								<div class="me-5">
									<label class="fs-6 fw-bold form-label">Is Active?</label>
									<div class="fs-7 fw-bold text-gray-400">Indicate if this metric is active and available for use</div>
								</div>
								<label class="form-check form-switch form-check-custom form-check-solid">
									<input id="metricIsActive" class="form-check-input" type="checkbox" value="1"  />
									<span class="form-check-label fw-bold text-gray-400">Active</span>
								</label>
							</div>			
						</div>
						<div class="col-md-6">
							<div class="d-flex flex-column fv-row">
								<label class="fs-6 fw-bold mb-2">
									<span class="required">Frequency</span>
								</label>
								<select id="metricFrequency" name="metricFrequency" aria-label="Select a Data Type" data-placeholder="Select a Frequency..." class="form-select form-select-solid fw-bolder">
									<option value="-1" disabled selected>Select a Data Type</option>
									<option value="0">Daily</option>
									<option value="1">Weekly</option>
									<option value="6">Monthly</option>
									<option value="7">OnDemand</option>
									
								</select>
								<span id="metricFrequency_Invalid" class="text-danger d-none">Please select a Frequency.</span>
							</div>


						</div>
					</div>
					

					

								
				</div>
				<!--end::Scroll-->
			</div>
			<!--end::Modal body-->
			<div class="modal-footer flex-center">
				<a href="/Metric" class="btn btn-light me-3" >Cancel</a>
				<button type="button" id="kt_modal_add_customer_submit" class="btn btn-primary" onclick="updateMetric();">
					<span id="updateMetricButtonLabel" class="indicator-label">Submit</span>
					<span id="updateMetricButtonBusyLabel" class="indicator-progress">Please wait...
					<span id="updateMetricButtonBusySpinner" class="spinner-border spinner-border-sm align-middle ms-2"></span></span>
				</button>
			</div>
		</form>
	</div>
</div>


<div class="modal fade" id="modalSelectItem" tabindex="-1" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered mw-650px">
		<div class="modal-content">
			<form class="form" id="formSelectItem">
				<input type="hidden" id="selectItemId" value="0" />
				<div class="modal-header" id="modalSelectItem_header">
					<h2 id="selectItemPrompt">Add a Select Item</h2>
					<div class="btn btn-icon btn-sm btn-active-icon-primary" onclick="$('#modalSelectItem').modal('hide');">
						<span class="svg-icon svg-icon-1">
							<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
								<rect opacity="0.5" x="6" y="17.3137" width="16" height="2" rx="1" transform="rotate(-45 6 17.3137)" fill="black" />
								<rect x="7.41422" y="6" width="16" height="2" rx="1" transform="rotate(45 7.41422 6)" fill="black" />
							</svg>
						</span>
					</div>
				</div>

				<div class="modal-body py-10 px-lg-17">
					<div class="scroll-y me-n7 pe-7" id="modalSelectItem_scroll" data-kt-scroll="true" data-kt-scroll-activate="{default: false, lg: true}" data-kt-scroll-max-height="auto" data-kt-scroll-dependencies="#modalSelectItem_header" data-kt-scroll-wrappers="#modalSelectItem_scroll" data-kt-scroll-offset="300px">
						<div class="fv-row mb-7">
							<label class="required fs-6 fw-bold mb-2">Display Text</label>
							<input id="selectItemDisplayText" type="text" class="form-control form-control-solid" placeholder="" name="selectItemDisplayText" value="@Model." />
							<span id="selectItemDisplayText_Invalid" class="text-danger d-none">Display Text is required.</span>
						</div>
						<div class="fv-row mb-7">
							<label class="required fs-6 fw-bold mb-2">Data Value</label>
							<input id="selectItemDataValue" type="text" class="form-control form-control-solid" placeholder="" name="selectItemDataValue" />
							<span id="selectItemDataValue_Invalid" class="text-danger d-none">Data Value is required.</span>
						</div>
					</div>
				</div>

				<div class="modal-footer flex-center">
					<button type="button" class="btn btn-light me-3" onclick="$('#modalSelectItem').modal('hide');">Cancel</button>
					<button type="button" id="buttonUpdateSelectItem" class="btn btn-primary" onclick="updateSelectItem();">
						<span id="updateSelectItemButtonLabel" class="indicator-label">Save</span>
						<span id="updateSelectItemButtonBusyLabel" class="indicator-progress">Please wait...
						<span id="updateSelectItemButtonBusySpinner" class="spinner-border spinner-border-sm align-middle ms-2"></span></span>
					</button>
				</div>

			</form>
		</div>
	</div>
</div>

<div class="modal fade" tabindex="-1" id="modalDeleteSelectItemConfirmation">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Selection Option?</h5>

                <!--begin::Close-->
                <div class="btn btn-icon btn-sm btn-active-light-primary ms-2" data-bs-dismiss="modal" aria-label="Close">
                    <span class="svg-icon svg-icon-2x">
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
							<rect opacity="0.5" x="6" y="17.3137" width="16" height="2" rx="1" transform="rotate(-45 6 17.3137)" fill="black"></rect>
							<rect x="7.41422" y="6" width="16" height="2" rx="1" transform="rotate(45 7.41422 6)" fill="black"></rect>
						</svg>
					</span>
                </div>
                <!--end::Close-->
            </div>

            <div class="modal-body">
                <p>Are you sure you want to delete this Selection Option?</p>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="deleteSelectItem();">OK</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
	<script src="/assets/plugins/custom/draggable/draggable.bundle.js"></script>

	<script type="text/javascript">

		$(document).ready(function () {
            InitDraggable();
			$("#metricDataType").val("@Model.DataType");
			$("#metricFrequency").val("@Model.Frequency");
			document.getElementById("metricAllowMultiple").checked = @Model.AllowMultipleValues.ToString().ToLower();
			document.getElementById("metricIsActive").checked = @Model.IsActive.ToString().ToLower();
			document.getElementById("metricIsNumeric").checked = @Model.IsAlphaSelectNumeric.ToString().ToLower();
			document.getElementById("metricIsPositivePolarity").checked = @Model.IsPositivePolarity.ToString().ToLower();

			//prepControlState(
			//	[
			//		"alphaSelectOptions", "numericMaxMinControls", "divAllowMultiple",
			//		"metricName_Invalid", "metricDescription_Invalid","metricDataType_Invalid","metricSelectItems_Invalid",
			//		"metricMinValue_Invalid","metricMaxValue_Invalid","selectItemDisplayText_Invalid","selectItemDataValue_Invalid",
			//		"divIsNumeric","metricAllowMultiple_Invalid","divPositivePolarityAndThreshold","metricFrequency_Invalid",
			//		"metricThreshold_Invalid","divThreshold2"
			//	]
			//);
			
			setControlState();

        });

		//function prepControlState(idArray){
		//	for (i = 0; i < idArray.length; i++){
		//		var id = idArray[i];
		//		$("#" + id).removeClass("d-none");
		//		$("#" + id).addClass("d-none");
		//	}
		//}

		class metric {
			constructor(metricId, name, description, dataType, allowMultipleValues, isActive, isPositivePolarity, isAlphaSelectNumeric, threshold, frequency, threshold2){
				this.metricId = metricId;
				this.name = name;
				this.description = description;
				this.dataType = dataType;
				this.minValue = null;
				this.maxValue = null;
				this.allowMultipleValues = allowMultipleValues;
				this.isActive = isActive;
				this.isPositivePolarity = isPositivePolarity;
				this.isAlphaSelectNumeric = isAlphaSelectNumeric;
				this.threshold = threshold;
				this.frequency = frequency;
				this.threshold2 = threshold2;
			}
		}

		class selectItem {
			constructor(metricSelectItemId, metricId, itemValue, itemDisplayText, sortOrder){
				this.metricSelectItemId = metricSelectItemId;
				this.metricId = metricId;
				this.itemValue = itemValue;
				this.itemDisplayText = itemDisplayText;
				this.sortOrder = sortOrder;
			}
		}

		var selectItemIdToDelete = -9999;

		function confirmDeleteSelectItem(id){
			$("#modalDeleteSelectItemConfirmation").modal("show");
			selectItemIdToDelete = id;
		}


		function deleteSelectItem(){
			$("#selectItemId_" + selectItemIdToDelete).remove();
			$("#modalDeleteSelectItemConfirmation").modal("hide");
		}

		
		function setControlState(){
			var dataTypeId = parseInt($("#metricDataType").val(),10);
			if (dataTypeId == 4){
				$("#alphaSelectOptions").removeClass("d-none");
				$("#divAllowMultiple").removeClass("d-none");
				$("#divIsNumeric").removeClass("d-none");
			} else {
				$("#alphaSelectOptions").addClass("d-none");
				$("#divAllowMultiple").addClass("d-none");
				$("#divIsNumeric").addClass("d-none");
			}
			if (dataTypeId == 1 || dataTypeId == 2 || dataTypeId == 6 || dataTypeId == 7 || dataTypeId == 8){
				$("#numericMaxMinControls").removeClass("d-none");
			} else {
				$("#numericMaxMinControls").addClass("d-none");
			}

			if (
				(dataTypeId == 0 || dataTypeId == 1 || dataTypeId == 2 || dataTypeId == 6 || dataTypeId == 7 || dataTypeId == 8)
				||
				(dataTypeId == 4 && document.getElementById("metricIsNumeric").checked)
				) {
				$("#divPositivePolarityAndThreshold").removeClass("d-none");
			} else {
				$("#divPositivePolarityAndThreshold").addClass("d-none");
			}

			if (dataTypeId == 8){
				$("#divThreshold2").removeClass("d-none");
			} else {
				$("#divThreshold2").addClass("d-none");
			}
		}

		function addSelectItem(){
			clearSelectItemForm();
			$("#modalSelectItem").modal("show");
		}

		

		function updateSelectItem(){
			if (validateSelectItemForm()){
				var thisSelectItem = new selectItem(
				parseInt($("#selectItemId").val(),10),
				@Model.MetricId,
				$("#selectItemDataValue").val(),
				$("#selectItemDisplayText").val(),
				-1
			);

			console.log(thisSelectItem);

			if (thisSelectItem.metricSelectItemId === 0){
				thisSelectItem.metricSelectItemId = getNextNewItemId();
				// clone placeholder, set values, and append to end of list
				var newItemRowObject = $("#selectItemId_MetricSelectItemId").clone();
				newItemRowObject[0].id = "selectItemId_" + thisSelectItem.metricSelectItemId;
				newItemRowObject.html(newItemRowObject.html().replaceAll("MetricSelectItemId",thisSelectItem.metricSelectItemId));
				newItemRowObject.addClass('draggable d-flex justify-content-between');
				newItemRowObject.removeClass('d-none');
				newItemRowObject.find("[name='selectItemRow_DisplayText']").html(thisSelectItem.itemDisplayText);
				newItemRowObject.find("[name='selectItemRow_ItemValue']").html(thisSelectItem.itemValue);
				console.log(newItemRowObject);
				//console.log(displayTextSpan);
				$("#selectItemSortContainer").append(newItemRowObject);
				
			} else {
				var itemRowObject =  $("#selectItemId_" + thisSelectItem.metricSelectItemId);
				itemRowObject.find("[name='selectItemRow_DisplayText']").html(thisSelectItem.itemDisplayText);
				itemRowObject.find("[name='selectItemRow_ItemValue']").html(thisSelectItem.itemValue);
			}


			$("#modalSelectItem").modal("hide");
			} 
		}

		function editSelectItem(id){
			console.log("edit id = " + id);
			var items = $("#selectItemSortContainer").get()[0].children;
			for (i = 0; i < items.length; i++){
				var item = items[i];
				var thisSelectItemId = parseInt(item.id.replace("selectItemId_",""),10);
				console.log("thisSelectItemId = " + thisSelectItemId);
				if (thisSelectItemId == id){
					console.log("found match");
					var itemRowObject =  $("#selectItemId_" + id);
					console.log(itemRowObject);
					$("#selectItemId").val(id);
					$("#selectItemDisplayText").val(itemRowObject.find("[name='selectItemRow_DisplayText']").html());
					$("#selectItemDataValue").val(itemRowObject.find("[name='selectItemRow_ItemValue']").html()); 
					//document.getElementById("selectItemIsActive").checked = selectItemToEdit.isActive;
					$("#modalSelectItem").modal("show");
				}
			}
		}

		

		function getNextNewItemId(){
			var minId = 0;
			var items = $("#selectItemSortContainer").get()[0].children;
			for (i = 0; i < items.length; i++){
				var item = items[i];
				var thisSelectItemId = parseInt(item.id.replace("selectItemId_",""),10);
				if (thisSelectItemId < minId){
					minId = thisSelectItemId;
				}
			}
			return minId - 1;
		}

		function getSelectItems(){
			var selectItems = [];
			var items = $("#selectItemSortContainer").get()[0].children;
			for (i = 0; i < items.length; i++){
				var item = items[i];
				var itemObject = $("#" + item.id);
				var thisSelectItemId = parseInt(item.id.replace("selectItemId_",""),10);
				var thisSelectItem = new selectItem(
					thisSelectItemId,
					@Model.MetricId,
					itemObject.find("[name='selectItemRow_ItemValue']").html(),
					itemObject.find("[name='selectItemRow_DisplayText']").html(),
					i,
					true
				);
				selectItems.push(thisSelectItem);
			}
			return selectItems;
		}

		function updateMetric() {
			if (validateMetricForm()){
				$("#updateMetricButtonLabel").addClass("d-none");
				$("#updateMetricButtonBusyLabel").removeClass("d-none");
				$("#updateMetricButtonBusySpinner").removeClass("d-none");

				var thisMetric = new metric(
					$("#metricId").val(),
					$("#metricName").val(), 
					$("#metricDescription").val(), 
					$("#metricDataType").find(":selected").val(), 
					document.getElementById("metricAllowMultiple").checked,
					document.getElementById("metricIsActive").checked,
					document.getElementById("metricIsPositivePolarity").checked,
					document.getElementById("metricIsNumeric").checked,
					$("#metricThreshold").val(),
					$("#metricFrequency").find(":selected").val(),
					$("#metricThreshold2").val()
				);

				if (thisMetric.dataType == 4){
					thisMetric.selectItems = getSelectItems();
				}

				if (thisMetric.dataType == 1 || thisMetric.dataType == 2 || thisMetric.dataType == 6 || thisMetric.dataType == 7 || thisMetric.dataType == 8){
					thisMetric.minValue = $("#metricMinValue").val();
					thisMetric.maxValue = $("#metricMaxValue").val();
				}

				console.log(thisMetric);

				serviceUrl = "/Metric/Update";
				$.ajax({
					url: serviceUrl,
					type: "post",
					data: JSON.stringify(thisMetric),
					contentType: "application/json",
					success: function (response) {
						if (response.success) {
							window.location.href="/Metric";
							//$("#metricListContainer").html(response.html);
							//$("#updateMetricButtonLabel").removeClass("d-none");
							//$("#updateMetricButtonBusyLabel").addClass("d-none");
							//$("#updateMetricButtonBusySpinner").addClass("d-none");
							//$("#kt_modal_add_metric").modal("hide");
						} else {
							console.log(serviceUrl + " did not succeed");
						}
						//hideBusySpinner();
					},
					error: function (xhr, ajaxOptions, thrownError) {
						console.log(serviceUrl + " failed");
						//hideBusySpinner();
					}
				});
			} 
		}

		function validateMetricForm(){
			var selectedMetricType = parseInt($("#metricDataType").find(":selected").val(),10);
			var result = true;

			// name is required
			if ($("#metricName").val().length == 0){
				$("#metricName_Invalid").removeClass("d-none");
				result = false;
			} else {
				$("#metricName_Invalid").addClass("d-none");
			}

			// description is required
			if ($("#metricDescription").val().length == 0){
				$("#metricDescription_Invalid").removeClass("d-none");
				result = false;
			} else {
				$("#metricDescription_Invalid").addClass("d-none");
			}

			// data type must be selected
			if ($("#metricDataType").find(":selected").val() == "-1"){
				$("#metricDataType_Invalid").removeClass("d-none");
				result = false;
			} else {
				$("#metricDataType_Invalid").addClass("d-none");
			}

			// frequency must be selected
			if ($("#metricFrequency").find(":selected").val() == "-1"){
				$("#metricFrequency_Invalid").removeClass("d-none");
				result = false;
			} else {
				$("#metricFrequency_Invalid").addClass("d-none");
			}

			// for alpha-select type, there must be at least one select option
			if (selectedMetricType == 4){
				var si = getSelectItems();
				if (si.length == 0){
					$("#metricSelectItems_Invalid").html("Please add at least one Alpha Select Option.");
					$("#metricSelectItems_Invalid").removeClass("d-none");
					result = false;
				} else {
					// for alpha-select type, if Enforce Numeric is checked, then all Select Item Data Values must be numeric
					if (document.getElementById("metricIsNumeric").checked){
						var selectItems = getSelectItems();
						var foundNonNumeric = false;
						for (i = 0; i < selectItems.length; i++){
							var si = selectItems[i];
							if ($.isNumeric(si.itemValue)){

							} else {
								foundNonNumeric = true;
							}
						}
						if (foundNonNumeric){
							$("#metricSelectItems_Invalid").html("Enforce Numeric is enabled and at least one Alpha Select Option has a non-numeric value.");
							$("#metricSelectItems_Invalid").removeClass("d-none");
							result = false;
						} else {
							$("#metricSelectItems_Invalid").addClass("d-none");
						}
					} else {
						$("#metricSelectItems_Invalid").addClass("d-none");
					}
				}
			}

			
			// for alpha-select type, Allow-Multiple and Enforce-Numeric may not both be checked
			if (selectedMetricType == 4){
				if (document.getElementById("metricIsNumeric").checked && document.getElementById("metricAllowMultiple").checked){
					$("#metricAllowMultiple_Invalid").html("Allow Multiple Values may not be checked if Enforce Numeric Values is enabled.");
					$("#metricAllowMultiple_Invalid").removeClass("d-none");
					result = false;
				} else {
					$("#metricAllowMultiple_Invalid").addClass("d-none");
				}
			}
					

			// for integer types, if min and max are provided they must be numeric and integers
			if (selectedMetricType == 1 || selectedMetricType == 6 || selectedMetricType == 7 || selectedMetricType == 8){
				$("#metricMinValue_Invalid").addClass("d-none");
				if ($("#metricMinValue").val().length > 0){
					if ($.isNumeric($("#metricMinValue").val())){
						if ($("#metricMinValue").val().includes(".")){
							$("#metricMinValue_Invalid").html("Min Value is not an Integer");
							$("#metricMinValue_Invalid").removeClass("d-none");
							result = false;
						}
					} else {
						$("#metricMinValue_Invalid").html("Min Value is not a number");
						$("#metricMinValue_Invalid").removeClass("d-none");
						result = false;
					}
				}

				$("#metricMaxValue_Invalid").addClass("d-none");
				if ($("#metricMaxValue").val().length > 0){
					if ($.isNumeric($("#metricMaxValue").val())){
						if ($("#metricMaxValue").val().includes(".")){
							$("#metricMaxValue_Invalid").html("Max Value is not an Integer");
							$("#metricMaxValue_Invalid").removeClass("d-none");
							result = false;
						}
					} else {
						$("#metricMaxValue_Invalid").html("Max Value is not a number");
						$("#metricMaxValue_Invalid").removeClass("d-none");
						result = false;
					}
				}
			}


			// for decimal type, if min and max are provided, they must be numeric
			if (selectedMetricType == 2){
				$("#metricMinValue_Invalid").addClass("d-none");
				if ($("#metricMinValue").val().length > 0){
					if ($.isNumeric($("#metricMinValue").val())){
						
					} else {
						$("#metricMinValue_Invalid").html("Min Value is not a number");
						$("#metricMinValue_Invalid").removeClass("d-none");
						result = false;
					}
				}

				$("#metricMaxValue_Invalid").addClass("d-none");
				if ($("#metricMaxValue").val().length > 0){
					if ($.isNumeric($("#metricMaxValue").val())){
						
					} else {
						$("#metricMaxValue_Invalid").html("Max Value is not a number");
						$("#metricMaxValue_Invalid").removeClass("d-none");
						result = false;
					}
				}
			}

			// for numeric types, if min and max are set then min must be less than max
			if (selectedMetricType == 1 || selectedMetricType == 2 || selectedMetricType == 6 || selectedMetricType == 7 || selectedMetricType == 8){
				if ($.isNumeric($("#metricMinValue").val()) && $.isNumeric($("#metricMaxValue").val())){
					if (parseFloat($("#metricMinValue").val()) > parseFloat($("#metricMaxValue").val())){
						$("#metricMinValue_Invalid").html("Min Value must be less than Max Value");
						$("#metricMinValue_Invalid").removeClass("d-none");
						result = false;
					}
				}
			}



			// For Slider, min and max are required
			if (selectedMetricType == 7){
				if ($("#metricMinValue").val().trim().length == 0){
					$("#metricMinValue_Invalid").html("Min Value is required for Integer - Slider");
						$("#metricMinValue_Invalid").removeClass("d-none");
						result = false;
				}
				if ($("#metricMaxValue").val().trim().length == 0){
					$("#metricMaxValue_Invalid").html("Max Value is required for Integer - Slider");
						$("#metricMaxValue_Invalid").removeClass("d-none");
						result = false;
				}
			}

			return result;
		}

		function validateSelectItemForm(){
			var result = true;
			if ($("#selectItemDisplayText").val().length == 0){
				$("#selectItemDisplayText_Invalid").removeClass("d-none");
				result = false;
			} else {
				$("#selectItemDisplayText_Invalid").addClass("d-none");
			}
			if ($("#selectItemDataValue").val().length == 0){
				$("#selectItemDataValue_Invalid").html("Data Value is required.");
				$("#selectItemDataValue_Invalid").removeClass("d-none");
				result = false;
			} else {
				if (document.getElementById("metricIsNumeric").checked){
					if ($.isNumeric($("#selectItemDataValue").val())){
						
					} else {
						$("#selectItemDataValue_Invalid").html("Data Value is not a number (Enforce Numeric is checked)");
						$("#selectItemDataValue_Invalid").removeClass("d-none");
						result = false;
					}
				}
				if (result){
					$("#selectItemDataValue_Invalid").addClass("d-none");
				}
			}
			return result;
		}
		
		function InitDraggable(){
			// Draggable Container
			var containers = document.querySelectorAll(".draggable-zone");

			if (containers.length === 0) {
				return false;
			}

			var swappable = new Sortable.default(containers, {
				draggable: ".draggable",
				handle: ".draggable .draggable-handle",
				mirror: {
					//appendTo: selector,
					appendTo: "body",
					constrainDimensions: true
				}
			});
		}

		function GetSortOrder(selectItemId){
			var items = $("#selectItemSortContainer").get()[0].children;
			for (i = 0; i < items.length; i++){
				var item = items[i];
				var thisSelectItemId = item.id.replace("selectItemId_","");
				if (thisSelectItemId == selectItemId){
					return i;
				}
			}
			return 0;
		}

		function clearSelectItemForm(){
			$("#selectItemId").val(0);
			$("#selectItemDataValue").val("");
			$("#selectItemDisplayText").val(""); 
		}

		function setMetricForm(selectItemToEdit){
			$("#selectItemId").val(selectItemToEdit.metricId);
			$("#selectItemDataValue").val(selectItemToEdit.itemValue);
			$("#selectItemDisplayText").val(selectItemToEdit.itemDisplayText); 
		}

	</script>
}